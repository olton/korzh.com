const id = "2018-02-10-aspnet-identity-weakening-password-policies.mdx";
						const collection = "blog";
						const slug = "aspnet-identity-weakening-password-policies";
						const body = "\r\n> This is the second article in a series of articles about ASP.NET Core Identity.\r\n> You can find the first one [here](add-extra-user-claims-aspnet-core-webapp).\r\n\r\n## Problem\r\nLet's suppose you created a new ASP.NET Core with the default Authentication (like in [previous article](aspnet-identity-store-user-data-in-claims)).\r\nThen you run it and try to register a new user. On the registration form, we need to enter a password.\r\nSince we need to register a user for testing purposes first of all - we don't want to make the password too complicated. We'd prefer to keep it simple and easy-to-remember (in the end - it's not a production-mode system!)\r\n\r\nHowever, if you try to enter something simple like \"qwerty\" or your name - you will get the following bunch of error messages:\r\n* Passwords must have at least one non-alphanumeric character.\r\n* Passwords must have at least one digit ('0'-'9').\r\n* Passwords must have at least one uppercase ('A'-'Z').\r\n\r\nThe reason for all these validation errors is that by default ASP.NET Core Identity has very strong password policies for the users. In the error messages above you can see the constraints which must be satisfied.\r\n\r\n## Solution\r\nThe good news is that you can change these policies very easily, right in `Configure` method of your `Startup` class.\r\n\r\nAll you need to do is to use another version of `AddIdentity` method which accepts a lambda expression with `IdentityOptions` parameter.\r\nSo the following default code that initializes the Identity:\r\n\r\n```csharp\r\nservices.AddIdentity<ApplicationUser, IdentityRole>()\r\n\t.AddEntityFrameworkStores<ApplicationDbContext>()\r\n\t.AddDefaultTokenProviders();\r\n```\r\n\r\nshould be changed to the something like the following:\r\n\r\n```csharp\r\nservices.AddIdentity<ApplicationUser, IdentityRole>(options => {\r\n\toptions.Password.RequiredLength = 3;\r\n\toptions.Password.RequiredUniqueChars = 0;\r\n\toptions.Password.RequireLowercase = false;\r\n\toptions.Password.RequireUppercase = false;\r\n\toptions.Password.RequireDigit = false;\r\n\toptions.Password.RequireNonAlphanumeric = false;\r\n})\r\n    .AddEntityFrameworkStores<ApplicationDbContext>()\r\n    .AddDefaultTokenProviders();\r\n```\r\nThe options above are self-descriptive, so no additional explanations are required.\r\n\r\nOf course, it's not good to leave such kind of password strength policies in production mode. That's why it will be a good idea to turn all those options off only in Development mode.\r\n\r\nSo, to make it possible we will need to add two more modifications to our `Startup` class:\r\n\r\n```csharp\r\npublic IHostingEnvironment Environment { get; }\r\n\r\npublic Startup(IConfiguration configuration, IHostingEnvironment env)\r\n{\r\n    Configuration = configuration;\r\n    Environment = env;\r\n}\r\n\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n    .     .     .     .     .     .     .\r\n    services.AddIdentity<ApplicationUser, IdentityRole>(options => {\r\n        if (Environment.IsDevelopment()) {\r\n            options.Password.RequiredLength = 3;\r\n            options.Password.RequiredUniqueChars = 0;\r\n            options.Password.RequireLowercase = false;\r\n            options.Password.RequireUppercase = false;\r\n            options.Password.RequireDigit = false;\r\n            options.Password.RequireNonAlphanumeric = false;\r\n        }\r\n    })\r\n    .AddEntityFrameworkStores<ApplicationDbContext>()\r\n    .AddDefaultTokenProviders();\r\n   .     .     .     .     .     .     .\r\n}\r\n```\r\n";
						const data = {title:"ASP.NET Identity - Weakening password policies",date:new Date(1518220800000),cover:{src:"/images/password-weak.jpg",alt:"Alt text"},description:"Since we need to register a user for testing purposes first of all - we don't want to make the password too complicated. We'd prefer to keep it simple and easy-to-remember (in the end - it's not a production-mode system!)",draft:false,category:"Identity",tags:["ASP-NET-CORE","ASP-NET-IDENTITY","PASSWORD"],sort:3,relatedPosts:[{slug:"aspnet-identity-store-user-data-in-claims",collection:"blog"},{slug:"aspnet-identity-migrate-membership-passwords",collection:"blog"},{slug:"aspnet-identity-master-password",collection:"blog"}]};
						const _internal = {
							type: 'content',
							filePath: "D:/Projects/sites/korzh.com/src/content/blog/2018-02-10-aspnet-identity-weakening-password-policies.mdx",
							rawData: "\r\ntitle: ASP.NET Identity - Weakening password policies\r\ntags: [\"ASP-NET-CORE\", \"ASP-NET-IDENTITY\", \"PASSWORD\"]\r\nslug: aspnet-identity-weakening-password-policies\r\ndate: 2018-02-10\r\ncover: {\r\nsrc: '/images/password-weak.jpg'\r\n}\r\nsort: 3\r\ndescription: Since we need to register a user for testing purposes first of all - we don't want to make the password too complicated. We'd prefer to keep it simple and easy-to-remember (in the end - it's not a production-mode system!)\r\nrelatedPosts:\r\n- aspnet-identity-store-user-data-in-claims\r\n- aspnet-identity-migrate-membership-passwords\r\n- aspnet-identity-master-password\r\ncategory: Identity\r",
						};

export { _internal, body, collection, data, id, slug };
