const id = "2018-02-22-aspnet-identity-migrate-membership-passwords.mdx";
						const collection = "blog";
						const slug = "aspnet-identity-migrate-membership-passwords";
						const body = "\r\nThis is a third part of the series of articles about some not-so-well-known features and tricks in ASP.NET Identity.\r\nHere are you can find the [first](add-extra-user-claims-aspnet-core-webapp) and the [second](aspnet-identity-weakening-password-policies) parts.\r\n\r\n## Problem\r\n\r\nThis task usually appears when you need to transfer your old MVC web application to ASP.NET Core. If you use MVC version 3 or 4 and your application provides a user authentication service, then most likely this part is done with the old ASP.NET Membership library.\r\n\r\nSo, imagine you have a bunch of users, each of them has some password and the hash of that password stored in some database. Now you need to transfer all your current users to the new system built with ASP.NET Core.\r\nOf course, it's not a big problem to transfer their names, addresses, and other information. The problem is in those password hashes. ASP.NET Core Identity uses another hashing algorithm so all current users will not be able to access the system with their old passwords - the hashes will not match.\r\n\r\n## Solution\r\nThe solution is rather simple: we need to rewrite the default hashing service in ASP.NET Core Identity and make it \"understand\" both the old and new hashes.\r\n\r\nHere is our class which implements `IPassowrdHasher` interface:\r\n\r\n```csharp\r\npublic class PasswordHasherWithOldMembershipSupport : IPasswordHasher<ApplicationUser>\r\n{\r\n\t//an instance of the default password hasher\r\n\tIPasswordHasher<ApplicationUser> _identityPasswordHasher = new PasswordHasher<ApplicationUser>();\r\n\r\n\t//Hashes the password using old algorithm from the days of ASP.NET Membership\r\n\tinternal static string HashPasswordInOldFormat(string password)\r\n\t{\r\n\t\tvar sha1 = new SHA1CryptoServiceProvider();\r\n\t\tvar data = Encoding.ASCII.GetBytes(password);\r\n\t\tvar sha1data = sha1.ComputeHash(data);\r\n\t\treturn Convert.ToBase64String(sha1data);\r\n\t}\r\n\r\n\t//the passwords of the new users will be hashed with new algorithm\r\n\tpublic string HashPassword(ApplicationUser user, string password) {\r\n\t\treturn _identityPasswordHasher.HashPassword(user, password);\r\n\t}\r\n\r\n\tpublic PasswordVerificationResult VerifyHashedPassword(ApplicationUser user,\r\n\t\t\t\tstring hashedPassword, string providedPassword)\r\n\t{\r\n\t\tstring pwdHash2 = HashPasswordInOldFormat(providedPassword);\r\n\r\n\r\n\t\tif (hashedPassword == pwdHash2) {\r\n\t\t\t//first we check the hashed password with \"old\" hash\r\n\t\t\treturn PasswordVerificationResult.Success;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t//if old hash doesn't work - use the default approach\r\n\t\t\treturn _identityPasswordHasher.VerifyHashedPassword(user, hashedPassword, providedPassword);\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nAfter that we just need to register our new `IPasswordHasher` implementation in the DI container:\r\n\r\n\r\n```csharp\r\n//Startup.cs\r\n.   .   .   .   .   .\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n    .   .   .   .   .   .\r\n\r\n    services.AddSingleton<IPasswordHasher<ApplicationUser>, PasswordHasherWithOldMembershipSupport>();\r\n}\r\n```";
						const data = {title:"ASP.NET Identity - Migrating users' passwords from ASP.NET Membership",date:new Date(1519257600000),cover:{src:"/images/user-data-migrate.png",alt:"Alt text"},description:"This task usually appears when you need to transfer your old MVC web application to ASP.NET Core. If you use MVC version 3 or 4 and your application provides a user authentication service, then most likely this part is done with the old ASP.NET Membership library",draft:false,category:"Identity",tags:["ASP-NET-CORE","ASP-NET-IDENTITY","ASP-NET_MEMBERSHIP"],sort:4,relatedPosts:[{slug:"aspnet-identity-store-user-data-in-claims",collection:"blog"},{slug:"aspnet-identity-weakening-password-policies",collection:"blog"},{slug:"aspnet-identity-master-password",collection:"blog"}]};
						const _internal = {
							type: 'content',
							filePath: "D:/Projects/sites/korzh.com/src/content/blog/2018-02-22-aspnet-identity-migrate-membership-passwords.mdx",
							rawData: "\r\ntitle: ASP.NET Identity - Migrating users' passwords from ASP.NET Membership\r\ntags: [\"ASP-NET-CORE\", \"ASP-NET-IDENTITY\", \"ASP-NET_MEMBERSHIP\"]\r\nslug: aspnet-identity-migrate-membership-passwords\r\ndate: 2018-02-22\r\ncover: {\r\nsrc: '/images/user-data-migrate.png'\r\n}\r\nsort: 4\r\ndescription: This task usually appears when you need to transfer your old MVC web application to ASP.NET Core. If you use MVC version 3 or 4 and your application provides a user authentication service, then most likely this part is done with the old ASP.NET Membership library\r\nrelatedPosts:\r\n- aspnet-identity-store-user-data-in-claims\r\n- aspnet-identity-weakening-password-policies\r\n- aspnet-identity-master-password\r\ncategory: Identity\r",
						};

export { _internal, body, collection, data, id, slug };
