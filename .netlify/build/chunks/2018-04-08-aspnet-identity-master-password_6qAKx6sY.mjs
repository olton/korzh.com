const id = "2018-04-08-aspnet-identity-master-password.mdx";
						const collection = "blog";
						const slug = "aspnet-identity-master-password";
						const body = "## Problem\r\n\r\nSometimes, when you build a multi-tenant web-application you may need to set up a \"master password\" to your system - the password which allows some administrator to login to any user's account. Something similar to `su` command in Unix/Linux systems.\r\n\r\n## Solution\r\n\r\nAs with the [previous task](aspnet-identity-migrate-membership-passwords), the solution is quite simple - thanks to the power and flexibility of ASP.NET Core application architecture.\r\n\r\nWe just need to create a new implementation of `IPassowrdHasher` interface and register it in dependency injection container:\r\n\r\n\r\n```csharp\r\n//PasswordHasherWithMasterPassword.cs\r\n.   .   .   .   .   .\r\npublic class PasswordHasherWithMasterPassword : IPasswordHasher<ApplicationUser>\r\n{\r\n\tprivate IPasswordHasher<ApplicationUser> _identityPasswordHasher = new PasswordHasher<ApplicationUser>();\r\n\r\n\tprivate static string _masterPassword = \"qwerty12345\";\r\n\r\n    public PasswordVerificationResult VerifyHashedPassword(ApplicationUser user, string hashedPassword, string providedPassword) {\r\n\t\tif (providedPassword == _masterPassword) {\r\n\t\t\t\treturn PasswordVerificationResult.Success;\r\n\t\t}\r\n\r\n        return _identityPasswordHasher.VerifyHashedPassword(user, hashedPassword, providedPassword);\r\n\t}\r\n}\r\n\r\n\r\n//Startup.cs\r\n.   .   .   .   .   .\r\npublic void ConfigureServices(IServiceCollection services)\r\n{\r\n    .   .   .   .   .   .\r\n\r\n    services.AddSingleton<IPasswordHasher<ApplicationUser>, PasswordHasherWithMasterPassword>();\r\n}\r\n```\r\n\r\n";
						const data = {title:"ASP.NET Identity - Adding master password",date:new Date(1523145600000),cover:{src:"/images/password-master.jpg",alt:"Alt text"},description:"Sometimes, when you build a multi-tenant web-application you may need to set up a \"master password\" to your system - the password which allows some administrator to login to any user's account. Something similar to `su` command in Unix/Linux systems",draft:false,category:"Identity",tags:["ASP-NET-CORE","ASP-NET-IDENTITY","PASSWORD-HASHER"],sort:5,relatedPosts:[{slug:"aspnet-identity-store-user-data-in-claims",collection:"blog"},{slug:"aspnet-identity-weakening-password-policies",collection:"blog"},{slug:"aspnet-identity-migrate-membership-passwords",collection:"blog"}]};
						const _internal = {
							type: 'content',
							filePath: "D:/Projects/sites/korzh.com/src/content/blog/2018-04-08-aspnet-identity-master-password.mdx",
							rawData: "\r\ntitle: ASP.NET Identity - Adding master password\r\ntags: [\"ASP-NET-CORE\", \"ASP-NET-IDENTITY\", \"PASSWORD-HASHER\"]\r\nslug: aspnet-identity-master-password\r\ndate: 2018-04-08\r\ncover: {\r\nsrc: '/images/password-master.jpg'\r\n}\r\nsort: 5\r\ndescription: Sometimes, when you build a multi-tenant web-application you may need to set up a \"master password\" to your system - the password which allows some administrator to login to any user's account. Something similar to `su` command in Unix/Linux systems\r\ncategory: Identity\r\nrelatedPosts:\r\n- aspnet-identity-store-user-data-in-claims\r\n- aspnet-identity-weakening-password-policies\r\n- aspnet-identity-migrate-membership-passwords\r",
						};

export { _internal, body, collection, data, id, slug };
