const id = "2021-03-31-crud-asp-net-core-with-easydata.mdx";
						const collection = "blog";
						const slug = "crud-asp-net-core-with-easydata";
						const body = "import {Image} from \"astro:assets\";\r\nimport demo1Image from \"../../images/blog/easydata-demo01.gif\"\r\nimport sshot1Image from \"../../images/blog/easydata-sshot01.jpg\"\r\nimport sshot2Image from \"../../images/blog/easydata-sshot02.jpg\"\r\nimport sshot3Image from \"../../images/blog/easydata-sshot03.jpg\"\r\n\r\n## Problem\r\n\r\nOne of the first tasks for most business applications is to implement CRUD (Create, Read, Update, Delete) operations for the main entities the app works with.\r\n\r\nEvery developer faces the following problems as part of solving the task:\r\n\r\n* The creation of CRUD pages and forms is very boring and time-consuming. Believe me, I’ve been there a lot of times.\r\n* If you do it manually, it can be very slow and error-prone (missed fields, forgotten validators, etc).\r\n* Of course, you can use the scaffolding tool provided by Visual Studio.\r\n\r\nHowever, it’s also not a quick process either, because you need to run that tool for each model class.\r\nAs a result, you get many .cs and .cshtml files, which you'll have to edit manually if something in the default behavior or appearance doesn't suit your needs.\r\nIn the event of changes in the model classes, you'll need to update those generated controllers and pages manually\r\nor regenerate the code and forms from scratch for each affected model class.\r\n\r\n* Moreover, even the built-in scaffolding doesn't provide some important, often essential functions such as paging or search.\r\n\r\n## Solution: EasyData library\r\n\r\nTo solve most (if not all) of those problems we created the [EasyData library](https://github.com/KorzhCom/EasyData).\r\nThe main advantage of EasyData is that it employs a declarative approach.\r\n\r\nThe whole process can be split into two main steps:\r\n\r\n1. You “describe” what data (entities and attributes) you want to work with and\r\nhow your application should work with that data (types, constraints, relations between entities, etc).\r\n\r\n2. Based on this information, the EasyData library establishes an API endpoint for CRUD operations and a vanilla JavaScript-based UI\r\nthat lets your users perform those operations via the API.\r\n\r\nThe most wonderful thing here is that when using Entity Framework Core,\r\nall you need for the first step (“describing” the data) is your DbContext.\r\nSimply “feed” it to the library, and EasyData automatically extracts all the information needed to create the API endpoints and CRUD UI.\r\n\r\n## Quick demo\r\n\r\nHere's a small introduction video that shows how EasyData works:\r\n\r\n<img src={demo1Image.src} alt=\"EasyData quick demo\" />\r\n\r\n## Getting Started\r\n\r\nFirst of all, to test EasyData you can open and run one of the [sample projects](https://github.com/korzh/EasyData/tree/master/samples) available in this repository.\r\n\r\nInstalling EasyData to your project takes the following three simple steps:\r\n\r\n### 1. Install EasyData NuGet packages\r\n\r\n* EasyData.AspNetCore\r\n* EasyData.EntityFrameworkCore.Relational\r\n\r\n### 2. Add EasyData middleware in `Startup.Configure`\r\n\r\n```csharp\r\nusing EasyData.Services;\r\n.    .    .    .    .\r\n\r\n    app.UseEndpoints(endpoints =>\r\n    {\r\n        endpoints.MapEasyData(options => {\r\n            options.UseDbContext<AppDbContext>();\r\n        });\r\n\r\n        endpoints.MapRazorPages();\r\n    });\r\n\r\n```\r\n\r\nIn the middleware options, we also specify the type of DbContext object that will be used as the source of the metadata.\r\n\r\n### 3. Set up a catch-all page for all CRUD operations\r\n\r\nIf you're using Razor Pages, add a new page (for example `EasyData.chstml`). If it’s MVC, you'll need a controller and a view.\r\nThis page will \"catch\" all URLs that begin with a certain prefix (`/easydata` by default but it's configurable). So, we use a special catch-all parameter in the route definition (`\"/easydata/{**entity}\"`).\r\n\r\nWe also add EasyData styles and the script file (`easydata.min.js`), which renders the data-management UI and handles all CRUD operations on the client-side.\r\n\r\n```csharp\r\n@page \"/easydata/{**entity}\"\r\n@{\r\n    ViewData[\"Title\"] = \"EasyData\";\r\n}\r\n<link rel=\"stylesheet\" href=\"https://cdn.korzh.com/ed/1.2.2/easydata.min.css\" />\r\n\r\n<div id=\"EasyDataContainer\"></div>\r\n\r\n@section Scripts {\r\n    <script src=\"https://cdn.korzh.com/ed/1.2.2/easydata.min.js\" type=\"text/javascript\"></script>\r\n    <script>\r\n        window.addEventListener('load', function () {\r\n            new easydata.crud.EasyDataViewDispatcher().run()\r\n        });\r\n    </script>\r\n}\r\n```\r\n\r\nThat’s it. Now you can run your web app, open the `/easydata` URL and enjoy CRUD functionality.\r\n\r\nThe result will be something like this:\r\n\r\n#### List view screen for one entity:\r\n\r\n<Image src={sshot1Image} alt=\"List view screen for Orders entity\" />\r\n\r\n#### \"Edit Record\" dialog:\r\n\r\n<Image src={sshot2Image} alt=\"Edit Record dialog\" />\r\n\r\n#### \"Lookup\" dialog (was opened from \"Edit Record\"):\r\n\r\n<Image src={sshot3Image} alt=\"Lookup dialog\" />\r\n\r\n\r\n## How it works\r\n\r\nLet's briefly go over how all this magic works.\r\nAs we mentioned before EasyData takes care of three main things:\r\n\r\n* It collects database metadata.\r\n* It establishes an API for the main CRUD operations.\r\n* It renders UI (again, based on the metadata) and processes all user interactions in that UI.\r\n\r\nLet’s explore all these parts in detail.\r\n\r\n### Metadata\r\n\r\nMetadata is the data about your data: what entities (tables) are stored in your database,\r\nhow they're connected, what attributes (fields) they have, what  the types of attributes are\r\nand what the constraints are with respect to the values we can store in those attributes.\r\n\r\nEasyData collects metadata (in one way or another) and stores it in the instance of `MetaData` class.\r\nThis object contains the list of entities (tables), the attributes (fields) for each entity, the connections between entities,\r\nand some additional information used in API and during UI rendering and processing.\r\n\r\nTo fill the MetaData object, we specify a metadata loader. In the example above, we did it with the UseDbContext call.\r\nSo, the metadata is loaded from a DbConext object. Currently (in version 1.2) this is the only metadata loader available.\r\nIn future versions, it will be possible to load metadata directly from a DbConnection object or perhaps with some other method.\r\n\r\n### EasyData middleware\r\n\r\nEasyData middleware is responsible for establishing a REST API for all CRUD (and not only) operations initiated by the client side.\r\n\r\nTo add the middleware to your pipeline use `MapEasyData` extension function inside `UseEndpoints` configuration delegate:\r\n\r\n```csharp\r\n   app.UseEndpoints(endpoints =>\r\n    {\r\n       endpoints.MapEasyData(options => {\r\n            options.UseDbContext<AppDbContext>();\r\n        });\r\n    }\r\n```\r\n\r\nThis call should be made before `MapMvc` or `MapRazorPages`.\r\nBy default, EasyData middleware is assigned to `/api/easydata endpoint`, but you can change it via the configuration function (action) passed in the parameter.\r\n\r\nThe only thing that's required in order to configure for `MapEasyData` is to tell it where to take the metadata.\r\nCurrently, there's just one option available: getting metadata from a DbContext.\r\nSo, that’s why we add `UseDbContext<AppDbContext>()` call in the example above.\r\nBesides getting metadata, `UseDbContext` also provides our middleware with all the means for performing CRUD operations (via the DbContext object).\r\n\r\n### EasyData UI root page\r\n\r\nThe third part of the EasyData setup process is the page where the CRUD user interface is rendered.\r\nIt must be a so-called \"catch-all\" Razor page or MVC view.\r\nBy default, this page must be opened for any path that starts with the `/easydata/` prefix.\r\n(So, all paths like `/easydata/student` or `/easydata/invoice` must be processed by this page.)\r\n\r\nNB: `/easydata` is the default prefix.\r\nYou can use another name, but in this case, it will be necessary to specify it in the options of our `RootDispatcherView` object.\r\n\r\nOur catch-all page can contain any HTML element of your choice.\r\nHowever, to ensure the visualization and normal operation of the CRUD UI, it must include the following 4 elements:\r\n\r\n* `<link>` element with a reference to EasyData CSS file (`easydata.min.cs`)\r\n* Container (empty `div` element), in which our interface will be displayed.\r\nBy default, it must have the ID `EasyDataContainer`, but this can also be configured with options.\r\n* `<script>` element with a reference to `easydata.min.js`.\r\n* And a small script that creates and launches the `EasyDataViewDispatcher` object on page load.\r\n\r\nAn example of the simplest “catch-all” page you can see in the Getting Started section above.\r\n\r\n## Wrapping up\r\n\r\nCurrently, EasyData can work with .NET Core 3.1 and .NET 5.\r\nObviously, all ASP.NET Core and Entity Framework Core versions that can work with the specified releases of .NET (Core) are supported.\r\nHowever, it won't be a problem to add support for previous versions of .NET Core or even .NET Framework 4.x.\r\nIf anyone needs it, please [submit an issue](https://github.com/KorzhCom/EasyData/issues) in EasyData's GitHub repository.\r\n\r\nEasyData can be a good tool with which to quickly prototype a new project or create a POC (proof of concept)\r\nwhen we already understand what data we'll need but don't want to spend a lot of time on the simplest operations with that data.\r\nHowever, we hope that in time it will be possible to fully use this solution in the production environment.\r\n\r\n\r\nSo, we look forward to hearing from you with any comments or advice you may have. Of course, don't forget to ad a start for the EasyData repository on GitHub, especially if this library helped you and saved some time.\r\n\r\nSo, we look forward to hearing from you with any comments or advice you may have.\r\nOf course, don't forget to add a star for the [EasyData repository on GitHub](https://github.com/KorzhCom/EasyData),\r\nespecially if this library helped you and saved some time.\r\n";
						const data = {title:"CRUD operations in ASP.NET Core with EasyData library",date:new Date(1617148800000),cover:{src:"/images/db-objects-01.jpg",alt:"Alt text"},description:"Implementing CRUD operations in your ASP.NET Core application can be a very tedious and time-consuming task. EasyData helps to add all necessary functionality (and even more) in a matter of minutes",draft:false,category:"general",tags:["ASP-NET-CORE","ENTITY-FRAMEWORK","JAVASCRIPT","CRUD","PAGING","DATA-FILTERING"],sort:5};
						const _internal = {
							type: 'content',
							filePath: "D:/Projects/sites/korzh.com/src/content/blog/2021-03-31-crud-asp-net-core-with-easydata.mdx",
							rawData: "\r\ntitle: CRUD operations in ASP.NET Core with EasyData library\r\ntags: [\"ASP-NET-CORE\", \"ENTITY-FRAMEWORK\", \"JAVASCRIPT\", \"CRUD\", \"PAGING\", \"DATA-FILTERING\"]\r\nslug: crud-asp-net-core-with-easydata\r\ndate: 2021-03-31\r\ncover: {\r\nsrc: '/images/db-objects-01.jpg'\r\n}\r\nsort: 5\r\ndescription: Implementing CRUD operations in your ASP.NET Core application can be a very tedious and time-consuming task. EasyData helps to add all necessary functionality (and even more) in a matter of minutes\r",
						};

export { _internal, body, collection, data, id, slug };
