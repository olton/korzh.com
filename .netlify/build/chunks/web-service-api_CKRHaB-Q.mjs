const id = "web-service-api.mdx";
						const collection = "js-docs";
						const slug = "web-service-api";
						const body = "import PageTitle from \"../../components/PageTitle.astro\"\r\n\r\n<PageTitle title={frontmatter.title} />\r\n\r\n## About EasyQuery Web Service\r\n\r\nEasyQuery Web Service is a specification of the server-side API that handles requests from the client-side EasyQuery widgets.\r\nThis API includes a few endpoints that allow you (as a developer) to implement some basic scenarios of advanced database search,\r\ndata filtering or ad-hoc reporting.\r\n\r\nThe only implementation of the API is available for now as a part [EasyQuery for ASP.NET Core](https://korzh.com/easyquery) library.\r\n\r\n## Endpoints\r\n\r\n### GetModel\r\n\r\n`GET /models/{modelId}`\r\n\r\nReturns the model by its ID\r\n\r\n### GetQuery\r\n\r\n`GET /models/{modelId}/queries/{queryId}`\r\n\r\nReturns the query by model's ID and query ID\r\n\r\n### SaveQuery\r\n\r\n`PUT /models/{modelId}/queries/{queryId}`\r\n\r\nSaves the query defined by `modelId` and `queryId` to the storage on the server.\r\nThe content of the request is a JSON object that contains the query definition:\r\n\r\n```json\r\n{\r\n  \"query\": {\r\n    \"id\": \"MyQueryID\",\r\n  }\r\n}\r\n```\r\n\r\n### NewQuery\r\n\r\n`POST /models/{modelId}/queries`\r\n\r\nCreates a new query for the model defined in `modelId` and returns it to the client\r\nThe content of the request is a JSON object that might contain the query definition (including the preferable ID and name of the new query).\r\nIf there is no `query` property in the request content - a default query with some random ID will be created.\r\n\r\n```json\r\n{\r\n  \"query\": {\r\n    \"id\": \"MyQueryID\",\r\n  }\r\n}\r\n```\r\n\r\n### RemoveQuery\r\n\r\n`DELETE /models/{modelId}/queries/{queryId}`\r\n\r\n\r\n### GetQueryList\r\n\r\n`GET /models/{modelId}/queries`\r\n\r\nReturns the list of the queries for specified model (`modelId`) available for the current user.\r\nThe response is a JSON object with the list of query definitions:\r\n\r\n```json\r\n[\r\n  {\r\n    \"id\":\"Query1ID\",\r\n  },\r\n  {\r\n    \"id\":\"Query2ID\",\r\n  },\r\n]\r\n```\r\n\r\n### SyncQuery\r\n\r\n`POST /models/{modelId}/queries/{queryId}/sync`\r\n\r\nSynchronizes the changes made in the query on the client-side with the server.\r\nThe content of the request is a JSON object which contains the query definition.\r\n\r\n```json\r\n{\r\n  \"query\": {\r\n    \"id\": \"MyQueryID\",\r\n  }\r\n}\r\n```\r\n\r\n### FetchData\r\n\r\n`POST /models/{modelId}/fetch`\r\n\r\nThis request allows to execute the query passed in the request's body and get the result set in a format, compatible with [Googles DataTable](https://developers.google.com/chart/interactive/docs/datatables_dataviews#javascriptliteral).\r\nHere `modelId` defines the model this query belongs to and can be used on the server side to specify the database and connection to it (if it's a multi-database application).\r\n\r\nThe content of the request, as usual, is a JSON object which contains the query definition and chunk (a piece of data) we would like to get.\r\nHere is an example:\r\n\r\n```json\r\n{\r\n  \"chunk\": {\r\n      \"offset\": 0,\r\n      \"limit\": 1000,\r\n      \"needTotal\": true //defines if we need to get the total number of recrods as well\r\n  },\r\n  \"query\": {\r\n    \"id\": \"MyQueryID\",\r\n  },\r\n  \"options\": {\r\n    \"sqlOptions\": {\r\n      \"SelectDistinct\": true\r\n    },\r\n  }\r\n}\r\n```\r\n\r\nThe response contains the result set itself (`resultSet` property) and some meta information (`meta`) field about the returned data. Here is an example:\r\n\r\n```json\r\n{\r\n  \"resultSet\": {\r\n    \"cols\": [\r\n      {\r\n        \"id\": \"col-3g8xzmshiiok\",\r\n        \"label\": \"Name\",\r\n        \"type\": 1,\r\n        \"originAttrId\": \"Product.ProductName\",\r\n      },\r\n      {\r\n        \"id\": \"col-5f8xzmshiqw3\",\r\n        \"isAggr\": true,\r\n        \"label\": \"Freight Sum\",\r\n        \"type\": 8,\r\n        \"originAttrId\": \"Order.Freight\",\r\n      }\r\n    ],\r\n    \"rows\": [\r\n      [\r\n        \"Alice Mutton\",\r\n        219.07\r\n      ],\r\n      [\r\n        \"Aniseed Syrup\",\r\n        8.53\r\n      ],\r\n    ]\r\n  },\r\n  \"meta\": {\r\n    \"totalRecords\": 66,\r\n    \"offset\": 0\r\n  }\r\n}\r\n```\r\n\r\n\r\n### GetValueList\r\n\r\n`GET /models/{modelId}/valuelists/{editorId}`\r\n\r\nGet the list of values by the model specified via `modelId` parameter and the value editor specified via `editorId`.\r\nThe response is a JSON object that contains the list of object with `id` and `text` properties each. Example:\r\n\r\n```json\r\n{\r\n  \"result\":\"ok\",\r\n\t\"values\":[\r\n\t  {\"id\":\"SouthAmerica\", \"text\": \"South America\", items: [\r\n\t    {\"id\":\"AR\",\"text\":\"Argentina\"},\r\n\t  ]},\r\n\t  {\"id\":\"Europe\", \"text\": \"Europe\", items: [\r\n\t    {\"id\":\"AT\",\"text\":\"Austria\"},\r\n\t  ]},\r\n\t]\r\n}\r\n```\r\n\r\nAs you can see the result list can be hirerachical (so, each item can include sub-items).\r\n\r\n### Export\r\n\r\n`POST /models/{modelId}/export/{format}`\r\n\r\nThis operation exports the result of the query with indicated `modelId`  to the specified `format` (e.g. \"csv\" or \"pdf\").\r\n\r\nThe content of the request is a JSON object that contains the query definition:\r\n\r\n```json\r\n{\r\n  \"query\": {\r\n    \"id\": \"MyQueryID\",\r\n  }\r\n}\r\n```\r\n\r\nThe response is a stream of the data in a specified format or a JSON object with the error message.\r\n";
						const data = {title:"EasyQuery Web Service API",description:"EasyQuery Web Service is a specification of the server-side API that handles requests from the client-side EasyQuery widgets"};
						const _internal = {
							type: 'content',
							filePath: "D:/Projects/sites/korzh.com/src/content/js-docs/web-service-api.mdx",
							rawData: "\r\ntitle: EasyQuery Web Service API\r\ndescription: EasyQuery Web Service is a specification of the server-side API that handles requests from the client-side EasyQuery widgets\r\nslug: web-service-api\r",
						};

export { _internal, body, collection, data, id, slug };
